[{"path":"https://sadleskorn.github.io/apply303/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 apply303 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://sadleskorn.github.io/apply303/articles/indian-food-orders.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Indian Food Orders","text":"","code":"box <- ggplot2::ggplot(data=name_and_quant, mapping=aes(x=Meat.Veg, y=Product.Price, color=Meat.Veg)) +   scale_colour_manual(values = c(\"tomato3\",\"darkgreen\")) +   theme_bw() +    ggtitle(\"Price Distributions for Meat & Vegetable Dishes\") +   xlab(\"Type of Dish\") +   ylab(\"Price\") +   geom_boxplot() plotly::ggplotly(box) #name_and_quant$  p <- name_and_quant %>%   ggplot2::ggplot( aes(Product.Price, Total.Quantity, color=Meat.Veg, label=Item.Name) ) +   scale_colour_manual(values = c(\"tomato3\",\"darkgreen\")) +   geom_jitter(width=0.15) +   theme_bw() +    ggtitle(\"Items' Number of Orders by Price\") +   xlab(\"Item Price\") +   ylab(\"Total Number of Orders\") plotly::ggplotly(p)"},{"path":"https://sadleskorn.github.io/apply303/articles/indian-food-orders.html","id":"background-information","dir":"Articles","previous_headings":"Visualization","what":"Background Information","title":"Indian Food Orders","text":"item price probably pounds, since data comes restaurant London. ’m interested prices relative prices .","code":""},{"path":"https://sadleskorn.github.io/apply303/articles/indian-food-orders.html","id":"description-of-data-source","dir":"Articles","previous_headings":"Visualization","what":"Description of data source","title":"Indian Food Orders","text":"dataset https://www.kaggle.com/henslersoftware/19560-indian-takeaway-orders. set used ~74000 rows containing information Indian restaurant’s order history 01-09-2015 12-07-2019. row represents one order one item. columns included order number, date ordered, item name, item price, quantity item ordered, total products order.","code":""},{"path":"https://sadleskorn.github.io/apply303/articles/indian-food-orders.html","id":"referencescitations","dir":"Articles","previous_headings":"Visualization","what":"References/citations","title":"Indian Food Orders","text":"omg, love stackoverflow! stackoverflow life…","code":""},{"path":"https://sadleskorn.github.io/apply303/articles/indian-food-orders.html","id":"reflections-on-project","dir":"Articles","previous_headings":"Visualization","what":"Reflections on project…","title":"Indian Food Orders","text":"ideas/suggestions Claus Wilke helped shape visualization? Wilke’s scatterplot birds’ bill length skull size– color indicating birds’ sex – gave idea differentiate meat/non-meat dishes color. sometime vegetarian, ’m interested comparing price popularity two groups! anything wish data? YES. wish cooler things . ’m still noob comes graphics visualizations. source data whole restaurant, wish compared two venues somehow. also wish made graph look cooler! Also, wish knew names dishes meant. ’m super familiar Indian food, ’s entirely possible missed meat dishes didn’t know words look . FINALLY! wish gotten tag_as_meat() function working. time constraints, ended using repetitive code check individual meat word. :’( interesting frustrating technical aspects ? interesting aspect deciding comparisons wanted make, represent visually. frustrating aspect definitely wrangling data. Writing example row “end goal” dataset helped… getting took quite struggle!","code":""},{"path":"https://sadleskorn.github.io/apply303/articles/ufo.html","id":"plot-of-ufos-sightings-animated-from-the-year-2000-onwards","dir":"Articles","previous_headings":"","what":"Plot of UFOs sightings animated from the year 2000 onwards","title":"ufo","text":"","code":"ufos |>    plot_mapbox(frame = ~month) |> #frame creates animation   layout(     mapbox = list(       style = \"dark\", #changes map style       zoom = 2.4,        center = list(lat = 37, lon = -95) #centers on USA     )   ) |>    add_markers(     x = ~longitude,      y = ~latitude,     marker = list(size = 3, color = \"#FFFFCC\", opacity = 0.4), #creates glyph aesthetic   ) |>    animation_opts(100) #sets the number of milliseconds per frame"},{"path":"https://sadleskorn.github.io/apply303/articles/ufo.html","id":"plot-of-ufo-sightings-cumulative-from-2000-","dir":"Articles","previous_headings":"","what":"Plot of UFO sightings cumulative from 2000.","title":"ufo","text":"","code":"ufos1 <- ufos |>    plot_mapbox() |>    layout(     mapbox = list(       style = \"dark\",        zoom = 2.4,        center = list(lat = 37, lon = -95)     )   ) |>    add_markers(     x = ~longitude,      y = ~latitude,     marker = list(size = 2, color = \"#FFFFCC\", opacity = 0.2),     text = ~paste(\"<b>Date/Time:<\/b>\", datetime,\"<br><b>Report:<\/b>\", comments, \"<br><b>City/State:<\/b>\", city, \",\", state),     textposition = \"auto\",     hoverlabel = list(align = \"left\"),     hoverinfo = \"text\"   )   ufos1"},{"path":"https://sadleskorn.github.io/apply303/articles/ufo.html","id":"reflection","dir":"Articles","previous_headings":"","what":"Reflection","title":"ufo","text":"quite frustrated animation. moments animation jitter crazily made frame rate higher. order make animation smoother, cut number years scrubbed well lower frame rate. Lots tweaking figure works. implemented use color lightness Wilke’s book convey density geospatial data. Since UFOs often seen night, made map background dark, used light glyphs emphasize higher intensity/concentration sightings. story telling visualization increasing number concentration UFO sighting reports across years. animation visualization also helps us see concentrations regions report sightings regularly.","code":""},{"path":"https://sadleskorn.github.io/apply303/articles/ufo.html","id":"improvements","dir":"Articles","previous_headings":"","what":"Improvements","title":"ufo","text":"took Tom Takeuchi’s idea using crosstalk create multi-select bar plot, selects years.","code":"library(crosstalk)  ufos2 <- highlight_key(ufos, ~year)  widgets <- bscols(   filter_select(\"Select a Year\", \"Select a Year\", ufos2, ~year) )  bscols(widths = c(3,9), widgets,   ufos2 |>    plot_mapbox() |>    layout(     mapbox = list(       style = \"dark\",        zoom = 2.4,        center = list(lat = 37, lon = -95)     )   ) |>    add_markers(     x = ~longitude,      y = ~latitude,     marker = list(size = 2, color = \"#FFFFCC\", opacity = 0.2),     text = ~paste(\"<b>Date/Time:<\/b>\", datetime,\"<br><b>Report:<\/b>\", comments, \"<br><b>City/State:<\/b>\", city, \",\", state),     textposition = \"auto\",     hoverlabel = list(align = \"left\"),     hoverinfo = \"text\"   )  )"},{"path":"https://sadleskorn.github.io/apply303/articles/winter-olympics.html","id":"total-medals","dir":"Articles","previous_headings":"","what":"Total Medals","title":"winter-olympics","text":"","code":"total_medals |>   plot_ly(x = ~Country, y = ~totals) %>%   add_bars() |>   layout(title = \"Norway has more Winter Olympic Medals than All Other Countries<br> (1924 - 2014)\")"},{"path":"https://sadleskorn.github.io/apply303/articles/winter-olympics.html","id":"medals-by-place","dir":"Articles","previous_headings":"","what":"Medals by Place","title":"winter-olympics","text":"","code":"medal_counts |>   mutate(Medal = forcats::fct_relevel(Medal,'bronze','silver','gold'),                 Country = reorder(Country, totals, sum)) |>   plot_ly(x = ~Country, y = ~totals, color = ~Medal) %>%   add_bars() |>   layout(barmode = \"stack\",          hovermode = \"x\") |>   layout(title = \"Norway Has the Most Gold, Silver, <br> and Bronze Winter Olympic Medals <br> (1924 - 2014)\") medal_counts2 |>   mutate(Medal = forcats::fct_relevel(Medal,'bronze','silver','gold'),                 Country = reorder(Country, totals, sum)) |>   plot_ly() %>%   add_bars(x = ~Country, y = ~totals, color = ~Medal, colors = c(\"#CD7F32\", \"#C0C0C0\", \"#FFD700\")) |>   layout(hovermode = \"x\") |>   layout(title = \"Norway Has the Most Gold, Silver, <br> and Bronze Winter Olympic Medals <br> (1924 - 2014)\") |>   layout(          yaxis = list(title = \"Total Medals\"),          xaxis = list(rangeslider = list(type = \"date\")),          updatemenus = list(list(type = \"buttons\", direction = \"right\", x = 0.9, y = 0.98,                                  buttons = list(                                    list(method = \"relayout\", args = list(\"barmode\", \"group\"),                                          label = \"Dodge\"),                                    list(method = \"relayout\", args = list(\"barmode\", \"stack\"),                                         label = \"Stack\")                                  ))))"},{"path":"https://sadleskorn.github.io/apply303/articles/winter-olympics.html","id":"medals-by-event","dir":"Articles","previous_headings":"","what":"Medals by Event","title":"winter-olympics","text":"","code":"medals_per_event$Medal <- factor(medals_per_event$Medal,                 # Relevel group factor                          levels = c(\"gold\", \"silver\", \"bronze\"))  require(crosstalk) shared_medals <- SharedData$new(medals_per_event)  bscols(widths = c(2,NA),   list(     filter_select(\"Sport\", \"Sport\", shared_medals, ~Sport)   ),   ggplotly(shared_medals %>%    ggplot(aes(Country, totals)) +   geom_point(aes(color = Medal, label = Sport))  +   theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +   scale_color_manual(values=c(\"#FFD700\", \"#C0C0C0\", \"#CD7F32\")) +    labs(x = \"Country <br> (alphabetical)\", y = \"Medals Won\", size = \"\",         title = \"Medals per Country <br> Split by Event\")))"},{"path":"https://sadleskorn.github.io/apply303/articles/winter-olympics.html","id":"choropleth-of-medals","dir":"Articles","previous_headings":"","what":"Choropleth of Medals","title":"winter-olympics","text":"","code":"medal_location2$hover <- with(medal_location2, paste(name, '<br>',                                                       \"Gold:\", gold, \"<br>\",                                                       \"Silver:\", silver, \"<br>\",                                                       \"Bronze:\", bronze))  plot_ly(medal_location2,          type='choropleth',          locations=medal_location2$iso_a3,          z=medal_location2$total, text=medal_location2$hover, colorscale=\"Blues\",         reversescale = TRUE) |> # make darker countries = more medals   layout(title = \"Winter Olympic Medals Won per Country <br> (1924 - 2014)\") |>   colorbar(title = \"Total Medals\")"},{"path":"https://sadleskorn.github.io/apply303/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sadie Kornoelje. Author, maintainer. Daniel Kwik. Author. Eleanor Lee. Author.","code":""},{"path":"https://sadleskorn.github.io/apply303/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kornoelje S, Kwik D, Lee E (2022). apply303: Package (One Line, Title Case). R package version 0.0.0.9000, https://sadleskorn.github.io/apply303.","code":"@Manual{,   title = {apply303: What the Package Does (One Line, Title Case)},   author = {Sadie Kornoelje and Daniel Kwik and Eleanor Lee},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://sadleskorn.github.io/apply303}, }"},{"path":"https://sadleskorn.github.io/apply303/reference/df_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to a data frame — df_apply","title":"Apply a function to a data frame — df_apply","text":"Apply function data frame","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/df_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to a data frame — df_apply","text":"","code":"df_apply(   .data,   .f,   .condition = function(x) {     TRUE },   .else = function(x) {     x },   ... )"},{"path":"https://sadleskorn.github.io/apply303/reference/df_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to a data frame — df_apply","text":".data data frame .f function like apply column(s) data frame .condition condition column must apply function .else condition fails, second function apply ... Allows arguments passed .f","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/df_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to a data frame — df_apply","text":"data frame","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/df_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to a data frame — df_apply","text":"","code":"n <- 7L TestData <-  tibble::tibble( double = rnorm(n, 100, 10),          x = 123400 / 10^(1L:n),          integer = (1L:n) * (1L:n),    # ^2 would return a double!!          character = LETTERS[1L:n],          factor = factor(letters[1L:n]),          logical = rep(c(TRUE, FALSE), length.out = n) ) df_apply(TestData, round, is.numeric, toupper, digits = 1) #> # A tibble: 7 × 6 #>   double       x integer character factor logical #>    <dbl>   <dbl>   <dbl> <chr>     <chr>  <chr>   #> 1  109.  12340         1 A         A      TRUE    #> 2  106.   1234         4 B         B      FALSE   #> 3  101.    123.        9 C         C      TRUE    #> 4  109.     12.3      16 D         D      FALSE   #> 5  103.      1.2      25 E         E      TRUE    #> 6  103       0.1      36 F         F      FALSE   #> 7   90.4     0        49 G         G      TRUE     data(medals_per_event) df_apply(medals_per_event, tolower, function(x){!is.numeric(x)}) #> # A tibble: 565 × 4 #>    Country   Medal  Sport                    totals #>    <chr>     <chr>  <chr>                     <int> #>  1 australia bronze alpine skiing                 1 #>  2 australia bronze freestyle skiing              2 #>  3 australia bronze short-track speedskating      1 #>  4 australia gold   freestyle skiing              3 #>  5 australia gold   short-track speedskating      1 #>  6 australia gold   snowboarding                  1 #>  7 australia silver freestyle skiing              2 #>  8 australia silver snowboarding                  1 #>  9 austria   bronze alpine skiing                41 #> 10 austria   bronze biathlon                      2 #> # … with 555 more rows"},{"path":"https://sadleskorn.github.io/apply303/reference/medal_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 100 total medals — medal_counts","title":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 100 total medals — medal_counts","text":"Medal Counts Winter Olympics Country dataset containing medals places won country, assuming country won least 100 total medals","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/medal_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 100 total medals — medal_counts","text":"","code":"medal_counts"},{"path":"https://sadleskorn.github.io/apply303/reference/medal_counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 100 total medals — medal_counts","text":"data frame 42 rows 3 variables: Country name country, referred USA Medal type medal, factor levels \"gold\", \"silver\" \"bronze\" totals number medals type, counts","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/medal_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 100 total medals — medal_counts","text":"","code":"head(medal_counts) #> # A tibble: 6 × 3 #>   Country Medal  totals #>   <fct>   <fct>   <int> #> 1 Austria bronze     81 #> 2 Austria gold       59 #> 3 Austria silver     78 #> 4 Canada  bronze     52 #> 5 Canada  gold       62 #> 6 Canada  silver     56  medal_counts |> dplyr::mutate(Medal = forcats::fct_relevel(Medal,'bronze','silver','gold'),       Country = reorder(Country, totals, sum)) |>  plotly::plot_ly(x = ~Country, y = ~totals, color = ~Medal) |>  plotfunctions::add_bars() |>  plotly::layout(barmode = \"stack\",         hovermode = \"x\") |>  plotly::layout(title = \"Norway Has the Most Gold,  Silver, <br> and Bronze Winter Olympic  Medals <br> (1924 - 2014)\") #> Error in as.vector(y): argument \"y\" is missing, with no default"},{"path":"https://sadleskorn.github.io/apply303/reference/medal_counts2.html","id":null,"dir":"Reference","previous_headings":"","what":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 1 total medal — medal_counts2","title":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 1 total medal — medal_counts2","text":"Medal Counts Winter Olympics Country dataset containing medals places won country, assuming country won least 1 total medal","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/medal_counts2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 1 total medal — medal_counts2","text":"","code":"medal_counts2"},{"path":"https://sadleskorn.github.io/apply303/reference/medal_counts2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 1 total medal — medal_counts2","text":"data frame 117 rows 3 variables: Country name country, referred USA Medal type medal, factor levels \"gold\", \"silver\" \"bronze\" totals number medals type, counts","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/medal_counts2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 1 total medal — medal_counts2","text":"","code":"data(medal_counts2)  medal_counts2 |> dplyr::mutate(Medal = forcats::fct_relevel(Medal,'bronze','silver','gold'),       Country = reorder(Country, totals, sum)) |>  plotly::plot_ly() |>  plotfunctions::add_bars(x = ~Country, y = ~totals, color = ~Medal,  colors = c(\"#CD7F32\", \"#C0C0C0\", \"#FFD700\")) |>  plotly::layout(hovermode = \"x\") |>  plotly::layout(title = \"Norway Has the Most Gold,  Silver, <br> and Bronze Winter Olympic  Medals <br> (1924 - 2014)\") |>  plotly::layout(    yaxis = list(title = \"Total Medals\"),    xaxis = list(rangeslider = list(type = \"date\")),    updatemenus = list(list(type = \"buttons\", direction = \"right\", x = 0.9, y = 0.98,                            buttons = list(                              list(method = \"relayout\", args = list(\"barmode\", \"group\"),                                   label = \"Dodge\"),                              list(method = \"relayout\", args = list(\"barmode\", \"stack\"),                                   label = \"Stack\")                            )))) #> Warning: Length y0 does not equal length y. The first element of y0 will be used. #> Warning: Class character is not supported, element color is ignored. #> Error in x - 0.5 * width: non-numeric argument to binary operator"},{"path":"https://sadleskorn.github.io/apply303/reference/medal_location2.html","id":null,"dir":"Reference","previous_headings":"","what":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 1 total medal; helpful for geospatial mapping — medal_location2","title":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 1 total medal; helpful for geospatial mapping — medal_location2","text":"Medal Counts Winter Olympics Country dataset containing medals places won country, assuming country won least 1 total medal; helpful geospatial mapping","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/medal_location2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 1 total medal; helpful for geospatial mapping — medal_location2","text":"","code":"medal_location2"},{"path":"https://sadleskorn.github.io/apply303/reference/medal_location2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 1 total medal; helpful for geospatial mapping — medal_location2","text":"data frame 36 rows 6 variables: name name country, referred USA iso_a3 country code, referred UN bronze number bronze medals, counts gold number gold medals, counts silver number silver medals, counts total total number medals, sum bronze, gold, silver","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/medal_location2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Medal Counts for Winter Olympics by Country\n\nA dataset containing the medals and places won by each country, assuming the country\nhas won at least 1 total medal; helpful for geospatial mapping — medal_location2","text":"","code":"head(medal_location2) #> # A tibble: 6 × 6 #>   name      iso_a3 bronze  gold silver total #>   <chr>     <chr>   <dbl> <dbl>  <dbl> <dbl> #> 1 Australia AUS         4     5      3    12 #> 2 Austria   AUT        81    59     78   218 #> 3 Belarus   BLR         5     6      4    15 #> 4 Belgium   BEL         3     1      1     5 #> 5 Britain   GBR        12    10      4    26 #> 6 Bulgaria  BGR         3     1      2     6  plotly::plot_ly(medal_location2, type='choropleth', locations=medal_location2$iso_a3, z=medal_location2$total, text=medal_location2$hover, colorscale=\"Blues\", reversescale = TRUE) |> # make darker countries = more medals  layout(title = \"Winter Olympic Medals Won per Country <br> (1924 - 2014)\") |>  colorbar(title = \"Total Medals\") #> Error in colorbar(layout(plotly::plot_ly(medal_location2, type = \"choropleth\",     locations = medal_location2$iso_a3, z = medal_location2$total,     text = medal_location2$hover, colorscale = \"Blues\", reversescale = TRUE),     title = \"Winter Olympic Medals Won per Country <br> (1924 - 2014)\"),     title = \"Total Medals\"): could not find function \"colorbar\""},{"path":"https://sadleskorn.github.io/apply303/reference/medals_per_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Medal Counts for Winter Olympics by Country per event\n\nA dataset containing the medals and places won by each country,\nin each event, assuming the country has won at least 1 total medal — medals_per_event","title":"Medal Counts for Winter Olympics by Country per event\n\nA dataset containing the medals and places won by each country,\nin each event, assuming the country has won at least 1 total medal — medals_per_event","text":"Medal Counts Winter Olympics Country per event dataset containing medals places won country, event, assuming country won least 1 total medal","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/medals_per_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Medal Counts for Winter Olympics by Country per event\n\nA dataset containing the medals and places won by each country,\nin each event, assuming the country has won at least 1 total medal — medals_per_event","text":"","code":"medals_per_event"},{"path":"https://sadleskorn.github.io/apply303/reference/medals_per_event.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Medal Counts for Winter Olympics by Country per event\n\nA dataset containing the medals and places won by each country,\nin each event, assuming the country has won at least 1 total medal — medals_per_event","text":"data frame 565 rows 4 variables: Country name country, referred USA Medal type medal, factor levels \"gold\", \"silver\" \"bronze\" Sport name sport, recognized IOC totals number medals type, counts","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/medals_per_event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Medal Counts for Winter Olympics by Country per event\n\nA dataset containing the medals and places won by each country,\nin each event, assuming the country has won at least 1 total medal — medals_per_event","text":"","code":"glimpse(medals_per_event) #> Error in glimpse(medals_per_event): could not find function \"glimpse\"  bscols(widths = c(2,NA), list(  filter_select(\"Sport\", \"Sport\", shared_medals, ~Sport) ), ggplotly(shared_medals %>%           ggplot(aes(Country, totals)) +           geom_point(aes(color = Medal, label = Sport))  +           theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +           scale_color_manual(values=c(\"#FFD700\", \"#C0C0C0\", \"#CD7F32\")) +           labs(x = \"Country <br> (alphabetical)\", y = \"Medals Won\", size = \"\",                title = \"Medals per Country <br> Split by Event\"))) #> Error in bscols(widths = c(2, NA), list(filter_select(\"Sport\", \"Sport\",     shared_medals, ~Sport)), ggplotly(shared_medals %>% ggplot(aes(Country,     totals)) + geom_point(aes(color = Medal, label = Sport)) +     theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +     scale_color_manual(values = c(\"#FFD700\", \"#C0C0C0\", \"#CD7F32\")) +     labs(x = \"Country <br> (alphabetical)\", y = \"Medals Won\",         size = \"\", title = \"Medals per Country <br> Split by Event\"))): could not find function \"bscols\""},{"path":"https://sadleskorn.github.io/apply303/reference/name_and_quant.html","id":null,"dir":"Reference","previous_headings":"","what":"Takeout orders from an Indian restaurant.\n\nA dataset containing the total quantity of each dish ordered, as well as the dish's price and status as vegetarian or meat. — name_and_quant","title":"Takeout orders from an Indian restaurant.\n\nA dataset containing the total quantity of each dish ordered, as well as the dish's price and status as vegetarian or meat. — name_and_quant","text":"Takeout orders Indian restaurant. dataset containing total quantity dish ordered, well dish's price status vegetarian meat.","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/name_and_quant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takeout orders from an Indian restaurant.\n\nA dataset containing the total quantity of each dish ordered, as well as the dish's price and status as vegetarian or meat. — name_and_quant","text":"","code":"name_and_quant"},{"path":"https://sadleskorn.github.io/apply303/reference/name_and_quant.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Takeout orders from an Indian restaurant.\n\nA dataset containing the total quantity of each dish ordered, as well as the dish's price and status as vegetarian or meat. — name_and_quant","text":"dataframe 238 rows 5 variables: Item.Name Name dish Total.Quantity Number times dish ordered Product.Price Price dish Prop..Total Proportion orders Meat.Veg Whether dish vegetarian (Veg) (Meat)","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/name_and_quant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takeout orders from an Indian restaurant.\n\nA dataset containing the total quantity of each dish ordered, as well as the dish's price and status as vegetarian or meat. — name_and_quant","text":"","code":"glimpse(name_and_quant) #> Error in glimpse(name_and_quant): could not find function \"glimpse\"  name_and_quant %>% group_by(Meat.Veg) %>% summarise(Num.Dishes.Sold = sum(Total.Quantity), Total.Revenue = sum(Total.Quantity * Product.Price)) #> Error in name_and_quant %>% group_by(Meat.Veg) %>% summarise(Num.Dishes.Sold = sum(Total.Quantity),     Total.Revenue = sum(Total.Quantity * Product.Price)): could not find function \"%>%\""},{"path":"https://sadleskorn.github.io/apply303/reference/total_medals.html","id":null,"dir":"Reference","previous_headings":"","what":"Total Winter Olympic Medals won by each country\n\nA dataset containing the total medals won by each country, assuming the country\nhas won at least 100 medals — total_medals","title":"Total Winter Olympic Medals won by each country\n\nA dataset containing the total medals won by each country, assuming the country\nhas won at least 100 medals — total_medals","text":"Total Winter Olympic Medals won country dataset containing total medals won country, assuming country won least 100 medals","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/total_medals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total Winter Olympic Medals won by each country\n\nA dataset containing the total medals won by each country, assuming the country\nhas won at least 100 medals — total_medals","text":"","code":"total_medals"},{"path":"https://sadleskorn.github.io/apply303/reference/total_medals.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Total Winter Olympic Medals won by each country\n\nA dataset containing the total medals won by each country, assuming the country\nhas won at least 100 medals — total_medals","text":"data frame 14 rows 2 variables: Country name country, referred USA totals total number medals, counts","code":""},{"path":"https://sadleskorn.github.io/apply303/reference/total_medals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total Winter Olympic Medals won by each country\n\nA dataset containing the total medals won by each country, assuming the country\nhas won at least 100 medals — total_medals","text":"","code":"glimpse(total_medals) #> Error in glimpse(total_medals): could not find function \"glimpse\"  total_medals |> plotly::plot_ly(x = ~Country, y = ~totals) |>  plotfunctions::add_bars() |>  plotly::layout(title = \"Norway has more Winter Olympic  Medals than All Other Countries<br> (1924 - 2014)\") #> Error in as.vector(y): argument \"y\" is missing, with no default"}]
